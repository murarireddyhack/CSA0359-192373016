#include <stdio.h>
#define MAX_SIZE 100
struct Queue
 {
    int items[MAX_SIZE];
    int front;
    int rear;
};
int isFull(struct Queue* queue)
{
    return (queue->rear == MAX_SIZE - 1);
}
int isEmpty(struct Queue* queue)
{
    return (queue->front == -1 || queue->front > queue->rear);
}
void enqueue(struct Queue* queue, int value) 
{
    if (isFull(queue)) 
	{
        printf("Queue is full. Cannot enqueue.\n");
        return;
    }
    if (queue->front == -1)
	{
        queue->front = 0;
    }
    queue->rear++;
    queue->items[queue->rear] = value;
}
int dequeue(struct Queue* queue)
 {
    if (isEmpty(queue))
	{
        printf("Queue is empty. Cannot dequeue.\n");
        return -1;
    }
    int removedItem = queue->items[queue->front];
    queue->front++;
    return removedItem;
}
void display(struct Queue* queue) 
{
    if (isEmpty(queue)) 
	{
        printf("Queue is empty.\n");
    }
    printf("Queue elements: ");
    for (int i = queue->front; i <= queue->rear; i++) 
	{
        printf("%d ", queue->items[i]);
    }
    printf("\n");
}
int main()
 {
    struct Queue queue = {{0}, -1, -1};
    enqueue(&queue, 10);
    enqueue(&queue, 20);
    enqueue(&queue, 30);
    display(&queue);
    printf("Dequeued item: %d\n", dequeue(&queue));
    display(&queue);
    printf("Front value: %d\n", queue.front);
    printf("Rear value: %d\n", queue.rear);
    
    return 0;
}
